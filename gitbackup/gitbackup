#!/usr/bin/python3
# This is used to copy modified files in a git repository to a backup dir.
# We can copy these files back later.
# Usage:
#    ./gitbackup:    Copy modified files to /tmp/xxx
#    ./gitbackup -r: Copy modified files from /tmp/xxx to current dir.


import subprocess,os,sys,getopt,shutil

tmpdir="/tmp/xxx" 
from_array=""
operation=""		# If operation == "", backup files. If operation == "r", restore files.
version=""			# Use "git diff [version] --name-status"


opts, args = getopt.getopt(sys.argv[1:], "rv:")
for o, a in opts:
	if o == "-r":
		operation="r"
	if o == "-v":
		version=a

if operation != "r":
	# Check /tmp/xxx directory
	if os.listdir(tmpdir) != []:
		shutil.rmtree(tmpdir)
		os.mkdir(tmpdir)
	if not os.path.isdir(tmpdir):
		try:
			user_input = input("\"" + tmpdir+"\" doesn't exist. Create it? ")
			if user_input == 'y':
				os.mkdir(tmpdir)
			else:
				print("No creating \"%s\" directory." % (tmpdir))
				sys.exit()
		except KeyboardInterrupt:
			sys.exit()

	if version != "":
		p1=subprocess.Popen(['git', 'diff', version, '--name-status'], stdout=subprocess.PIPE)
	else:
		p1=subprocess.Popen(['git', 'status', '--short'], stdout=subprocess.PIPE)
	p1_read = p1.stdout.read()

	# Check exit status
	p1.communicate()
	if p1.returncode != 0:
		print("subprocess exit abnormally.")
		sys.exit()

	p1_lines= p1_read.splitlines()
	for line in p1_lines:
		token=line.decode("utf-8").split()
		if len(token)>=2 and token[0] == "M": 
			target = token[1]
			os.makedirs(tmpdir + "/" + target[:target.rfind("/")], exist_ok=True)
			os.system("cp " + target + " " + tmpdir + "/" + target[:target.rfind("/")])
else:
	for dirName, subdirList, fileList in os.walk(tmpdir):
		for fname in fileList:
			shutil.copyfile(dirName + "/" + fname, dirName[len(tmpdir)+1:] + "/" + fname)
#			from_array += "cp " + dirName + "/" + fname + " " + dirName[len(tmpdir):] + ";"
#	print(from_array)

